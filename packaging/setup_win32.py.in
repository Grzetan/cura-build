#  Needed build-ins
import sys
import os.path
import platform

# Importing preinstalled modules to get their paths
import PyQt5
import numpy
import trimesh

from cx_Freeze import setup, Executable, hooks


zip_includes = []


def load_numpy(finder, module):
    finder.IncludePackage("numpy.core._methods")
    finder.IncludePackage("numpy._globals")
    finder.IncludePackage("numpy.lib.format")
    finder.IncludePackage("numpy.linalg._umath_linalg")

    # Include all MKL files that are needed to get Numpy with MKL working.
    npy_dll_dir = os.path.join(module.path[0], "DLLs")
    required_mkl_files = [
        "libifcoremd.dll",
        "libimalloc.dll",
        "libiomp5md.dll",
        "libmmd.dll",
        "mkl_avx.1.dll",
        "mkl_avx2.1.dll",
        "mkl_avx512.1.dll",
        "mkl_core.1.dll",
        "mkl_def.1.dll",
        "mkl_intel_thread.1.dll",
        "mkl_mc.1.dll",
        "mkl_mc3.1.dll"
    ]

    for file in required_mkl_files:
        finder.IncludeFiles(os.path.join(npy_dll_dir, file), file)

hooks.load_numpy = load_numpy

# Trimesh data files
# Includes everything that the setup.py specifies as extra files:
# https://github.com/mikedh/trimesh/blob/7b67e9a8fb70a8a795f3cec6ff615d8d7bb5be2d/setup.py#L134-L136
# cx-Freeze doesn't recognise these as dependencies, so we have to specify them manually just like that set-up.
trimesh_resources_path = os.path.join(os.path.dirname(trimesh.__file__), "resources")
trimesh_resources_required_files = [
    "gltf_2_schema.zip",
    "units_to_inches.json",
    os.path.join("templates", "base.svg"),
    os.path.join("templates", "blender_boolean.py"),
    os.path.join("templates", "dxf.json"),
    os.path.join("templates", "path.svg"),
    os.path.join("templates", "ply.json"),
    os.path.join("templates", "viewer.zip")
]
for file_name in trimesh_resources_required_files:
    item = (os.path.join(trimesh_resources_path, file_name), os.path.join("trimesh", "resources", file_name))
    zip_includes.append(item)

def load_pyqt5_qtquick(finder, module):
    finder.IncludeModule("PyQt5.QtCore")
    finder.IncludeModule("PyQt5.QtGui")
    finder.IncludeModule("PyQt5.QtQml")
    finder.IncludeModule("PyQt5.QtNetwork")
    finder.IncludeModule("PyQt5.QtWebSockets")
    finder.IncludeModule("PyQt5._QOpenGLFunctions_2_0")
    finder.IncludeModule("PyQt5._QOpenGLFunctions_2_1")
    finder.IncludeModule("PyQt5._QOpenGLFunctions_4_1_Core")

hooks.load_PyQt5_QtQuick = load_pyqt5_qtquick

def load_pyqt5_qtnetwork(finder, module):
    finder.IncludeModule("PyQt5.QtCore")

    qt_path = os.path.join(os.path.dirname(PyQt5.QtCore.__file__), "Qt", "bin")
    required_ssl_files = [
        "libeay32.dll",
        "ssleay32.dll",
    ]
    for file_name in required_ssl_files:
        finder.IncludeFiles(os.path.join(qt_path, file_name), file_name)

hooks.load_PyQt5_QtNetwork = load_pyqt5_qtnetwork

search_path = sys.path.copy()
search_path.insert(1, "@EXTERNALPROJECT_INSTALL_PREFIX@/lib/python3.10/site-packages/")
search_path.insert(2, "@CMAKE_PREFIX_PATH@/lib/python3.10/site-packages/")

# Dependencies are automatically detected, but it might need
# fine tuning.
build_options = {
    "build_exe": "package",
    "zip_include_packages": "*",
    "zip_exclude_packages": "certifi",
    "path": search_path,
    "packages": [
        "appdirs",
        "packaging",
        "cryptography",
        "pyclipper",
        "xml.etree",
        "uuid",
        "serial",
        "zeroconf",
        "requests",
        "idna",
        "UM",
        "cura",
        "scipy.spatial",
        "sip",
        "stl",
        "netifaces",
        "networkx",
        "trimesh",
        "trimesh.resources",
        "Savitar",
        "PyQt5.QtDBus",
        "comtypes",
        "Charon",
        "logging",
        "logging.config",
        "logging.handlers",
    ],
    "include_files": [
        ("@EXTERNALPROJECT_INSTALL_PREFIX@/bin/CuraEngine.exe", ""),
        ("@EXTERNALPROJECT_INSTALL_PREFIX@/lib/cura/plugins", ""),
        ("@EXTERNALPROJECT_INSTALL_PREFIX@/lib/uranium/plugins", ""),
        ("@EXTERNALPROJECT_INSTALL_PREFIX@/lib/python3.10/site-packages/UM/Qt/qml/UM", "qml/UM"),
        ("@EXTERNALPROJECT_INSTALL_PREFIX@/share/cura/resources", "resources"),
        ("@EXTERNALPROJECT_INSTALL_PREFIX@/share/uranium/resources", "resources"),
        ("@CMAKE_PREFIX_PATH@/bin/openctm.dll", ""), # For opening .CTM files
        ("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/concrt140.dll",""),
        ("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/d3dcompiler_47.dll",""),
        ("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/libcrypto-1_1-x64.dll",""),
        ("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/libeay32.dll",""),
        ("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/libEGL.dll",""),
        ("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/libGLESv2.dll",""),
        ("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/libssl-1_1-x64.dll",""),
        ("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/msvcp140.dll",""),
        ("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/msvcp140_1.dll",""),
        ("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/msvcp140_2.dll",""),
        ("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/opengl32sw.dll",""),
        ("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/Qt5Bluetooth.dll",""),
        ("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/Qt5Core.dll",""),
        ("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/Qt5DBus.dll",""),
        ("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/Qt5Designer.dll",""),
        ("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/Qt5Gui.dll",""),
        ("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/Qt5Help.dll",""),
        #("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/Qt5Location.dll",""), #Plug-in doesn't get included.
        #("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/Qt5Multimedia.dll",""), #Plug-in doesn't get included.
        #("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/Qt5MultimediaWidgets.dll",""), #Plug-in doesn't get included.
        ("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/Qt5Network.dll",""),
        ("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/Qt5Nfc.dll",""),
        ("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/Qt5OpenGL.dll",""),
        ("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/Qt5Positioning.dll",""),
        ("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/Qt5PositioningQuick.dll",""),
        ("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/Qt5PrintSupport.dll",""),
        ("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/Qt5Qml.dll",""),
        ("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/Qt5QmlModels.dll",""),
        ("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/Qt5QmlWorkerScript.dll",""),
        ("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/Qt5Quick.dll",""),
        ("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/Qt5Quick3D.dll",""),
        ("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/Qt5Quick3DAssetImport.dll",""),
        ("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/Qt5Quick3DRender.dll",""),
        ("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/Qt5Quick3DRuntimeRender.dll",""),
        ("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/Qt5Quick3DUtils.dll",""),
        ("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/Qt5QuickControls2.dll",""),
        ("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/Qt5QuickParticles.dll",""),
        ("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/Qt5QuickShapes.dll",""),
        ("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/Qt5QuickTemplates2.dll",""),
        ("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/Qt5QuickTest.dll",""),
        ("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/Qt5QuickWidgets.dll",""),
        ("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/Qt5RemoteObjects.dll",""),
        #("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/Qt5Sensors.dll",""), #Plug-in doesn't get included.
        #("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/Qt5SerialPort.dll",""), #Plug-in doesn't get included.
        ("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/Qt5Sql.dll",""),
        ("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/Qt5Svg.dll",""),
        ("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/Qt5Test.dll",""),
        ("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/Qt5TextToSpeech.dll",""),
        #("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/Qt5WebChannel.dll",""), #Plug-in doesn't get included.
        ("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/Qt5WebSockets.dll",""),
        ("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/Qt5WebView.dll",""),
        ("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/Qt5Widgets.dll",""),
        ("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/Qt5WinExtras.dll",""),
        ("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/Qt5Xml.dll",""),
        #("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/Qt5XmlPatterns.dll",""), #Plug-in doesn't get included.
        ("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/ssleay32.dll",""),
        ("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/vcruntime140.dll",""),
        ("@CMAKE_PREFIX_PATH@/lib/site-packages/PyQt5/Qt5/bin/vcruntime140_1.dll",""),
        # Preinstalled PyQt5 installation
        (PyQt5.__path__[0] + "/Qt5/qml/Qt", "qml/Qt"),
        (PyQt5.__path__[0] + "/Qt5/qml/QtQml", "qml/QtQml"),
        (PyQt5.__path__[0] + "/Qt5/qml/QtQuick", "qml/QtQuick"),
        (PyQt5.__path__[0] + "/Qt5/qml/QtQuick.2", "qml/QtQuick.2"),
        (PyQt5.__path__[0] + "/Qt5/qml/QtGraphicalEffects", "qml/QtGraphicalEffects"),
    ],
    "zip_includes": zip_includes,
    "excludes": [ ],
    "replace_paths": [("*", "")],
}

executables = [
    Executable(script="@EXTERNALPROJECT_INSTALL_PREFIX@/bin/cura_app.py",
               base="Win32GUI",
               targetName = "Cura.exe",
               icon="@CMAKE_SOURCE_DIR@/packaging/cura.ico"
               ),
    Executable(script="@EXTERNALPROJECT_INSTALL_PREFIX@/bin/cura_app.py",
               base="Console",
               targetName = "CuraCLI.exe",
               icon="@CMAKE_SOURCE_DIR@/packaging/cura.ico"
               ),
]

setup(
    name = "Ultimaker Cura",
    version = "@CURA_VERSION_MAJOR@.@CURA_VERSION_MINOR@.@CURA_VERSION_PATCH@",
    description = "Ultimaker Cura",
    long_description = "Ultimaker Cura - 3D Printing Software",
    author = "Ultimaker B.V.",
    url = "http://software.ultimaker.com/",
    license = "GNU LESSER GENERAL PUBLIC LICENSE (LGPL)",

    options = {"build_exe": build_options},
    executables = executables
)
